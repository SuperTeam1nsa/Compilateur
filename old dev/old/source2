%{
             
#include <stdlib.h>
#include "def.h"
%}

blancs    [ \t]+

chiffre   [0-9]
entier    {chiffre}+
exposant  [eE][+-]?{entier}
nom_variable [a-zA-Z]+
reel    {entier}("."{entier})?{exposant}?

%%

{blancs}  { /* On ignore */ }
{reel}    {
     /* yylval=atof(yytext);*/
      {printf("tNOMBRE"); return(tNOMBRE);}
    }
"+"   {printf("tPLUS"); 
       return(tPLUS);
}
"-"   {printf("tMOINS"); return(tMOINS);}
"*"   {printf("tFOIS"); return(tFOIS);}
"/"   {printf("tDIVISE"); return(tDIVISE);}
"^"   {printf("tPUISSANCE"); return(tPUISSANCE);}
"("   {printf("tOP"); return(tOP);}
")"   {printf("tCP"); return(tCP);}
"\n"  {printf("tNEW_LINE"); return(tNEW_LINE);}
"=="  {printf("tCOMPARAISON"); return(tCOMPARAISON);}
"="   {printf("tEGAL"); return(tEGAL);}
"<"   {printf("tINFSTRICT"); return(tINFSTRICT);}
">"   {printf("tSUPSTRICT"); return(tSUPSTRICT);}
">="  {printf("tSUPEGAL"); return(tSUPEGAL);}
"<="  {printf("tINFEGAL"); return(tINFEGAL);}
"!="  {printf("tDIFF"); return(tDIFF);}
"int" {printf("tINT"); return(tINT);}
";"   {printf("tVIRG"); return(tVIRG);}
"main" printf("tMAIN"); return(tMAIN);}
"const" {printf("tCONST"); return(tCONST);}
{nom_variable} {printf(" variable : %s",yytext); return(tVAR);}

%%
int yywrap(void){
    return 1;
}
int main(){
    yylex();
    return 0;
}
